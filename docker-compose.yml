### docker-compose network for fast and easy development and testing of prototype services ###
#
# The default `docker-compose up` spins up a mongo database and a local devnet
# to which the services connect. The protype-services will build (`yarn start`)
# and launch. Once you see `Nest application successfully started` in your console,
# you can connect to the services on <http://localhost:3000/>.
# To map to a different port, start with `docker-compose run -p 1234:3001 services`
# instead (in this example, you could access the services on <http://localhost:1234/>).
# You can also build and run the services directly on your machine but still connect
# to containerized database and mashnet-node:
# ```
# docker-compose up mongodb mashnet-node
# yarn install
# yarn start
# ```
# In any scenario, use `docker-compose down -v` for teardown, which removes containers
# and purges the data volumes, resetting all state.

version: '3'

services:
  mongodb:
    image: mongo:latest
    environment:
      - MONGODB_DATABASE=registry
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    ports:
      - 27017:27017
  mashnet-node:
    image: kiltprotocol/mashnet-node
    ports:
      - 9944:9944
    command: ./target/release/mashnet-node --dev --ws-port 9944 --ws-external
  services:
    build: .
    image: local/prototype-services
    environment:
      - NODE_ENV=docker-compose
      - MONGODB_HOST=mongodb
      - MONGODB_USER=mongoadmin
      - MONGODB_PASS=secret
      - FAUCET_ACCOUNT=faucet
      - BOOT_NODE_ADDRESS=ws://mashnet-node:9944
    volumes:
      - ./src:/app/src
    command: yarn start
    ports:
      - 3000:3000
    links:
      - mongodb
      - mashnet-node
